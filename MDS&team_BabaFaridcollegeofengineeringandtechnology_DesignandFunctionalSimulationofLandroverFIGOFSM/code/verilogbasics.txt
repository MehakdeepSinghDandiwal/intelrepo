module verilogbasics(
  input clk,
  input reset,
  input x,
  output [2:0] z,
  output [6:0] seg
);

  parameter R0 = 3'b000;
  parameter R1 = 3'b001;
  parameter R2 = 3'b010;
  parameter R3 = 3'b011;
  parameter R4 = 3'b100; 
  parameter R5 = 3'b101;
  parameter R6 = 3'b110;
  parameter R7 = 3'b111;

  reg [2:0] room = R0;
  reg [2:0] next_room;

  // Instantiate the SevenSegmentDisplay module
  SevenSegmentDisplay display(.data(z), .seg(seg));

  always @(posedge clk or posedge reset) begin
    if (reset) begin 
      room <= R0;
    end
    else room <= next_room;
  end

  always @(room or x) begin
    case (room)
      R0: begin
        if (x == 0) next_room = R0;
        else next_room = R1;
      end
      R1: begin
        if (x == 0) next_room = R2;
        else next_room = R4;
      end
      R2: begin
        if (x == 0) next_room = R3;
        else next_room = R4;
      end
      R3: begin
        if (x == 0) next_room = R3;
        else next_room = R0;
      end
      R4: begin
        if (x == 0) next_room = R7;
        else next_room = R5;
      end
      R5: begin
        if (x == 0) next_room = R3;
        else next_room = R6;
      end
      R6: begin
        if (x == 0) next_room = R7;
        else next_room = R6;
      end
      R7: begin
        if (x == 0) next_room = R1;
        else next_room = R5; 
      end
      default: next_room = R0;
    endcase
  end
	assign z=room;

endmodule

module SevenSegmentDisplay(
  input [2:0] data,
  output reg [6:0] seg
);
  always @*
    case (data)
      3'b000: seg = 7'b1000000; // Display '0'
      3'b001: seg = 7'b1111001; // Display '1'
      3'b010: seg = 7'b0100100; // Display '2'
      3'b011: seg = 7'b0110000; // Display '3'
      3'b100: seg = 7'b0011001; // Display '4'
      3'b101: seg = 7'b0010010; // Display '5'
      3'b110: seg = 7'b0000010; // Display '6'
      3'b111: seg = 7'b1111000; // Display '7'
      default: seg = 7'b1111111; // Display 'OFF' or '8'
    endcase
endmodule
